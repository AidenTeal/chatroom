import { StreamClient } from '@stream-io/node-sdk/dist/src/StreamClient';
import { ChannelGetOrCreateRequest, DeleteChannelRequest, DeleteMessageRequest, DeleteReactionRequest, EventRequest, GetManyMessagesRequest, GetMessageRequest, GetOGRequest, GetReactionsRequest, GetRepliesRequest, HideChannelRequest, MarkReadRequest, MarkUnreadRequest, MuteChannelRequest, QueryMembersRequest, SendMessageRequest, SendReactionRequest, ShowChannelRequest, TranslateMessageRequest, TruncateChannelRequest, UnmuteChannelRequest, UpdateChannelPartialRequest, UpdateChannelRequest, UpdateMessagePartialRequest, UpdateMessageRequest } from '@stream-io/node-sdk/dist/src/gen/chat';
import { OmitTypeId } from '@stream-io/node-sdk/dist/src/types';
export declare class StreamChannel {
    private readonly streamClient;
    readonly type: string;
    id?: string | undefined;
    private readonly channelsApi;
    private readonly messagesApi;
    private readonly eventsApi;
    constructor(streamClient: StreamClient, type: string, id?: string | undefined);
    get cid(): string;
    delete: (request?: OmitTypeId<DeleteChannelRequest>) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").DeleteChannelResponse>;
    update: (updateChannelRequest: OmitTypeId<UpdateChannelRequest>) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").UpdateChannelResponse>;
    updatePartial: (updateChannelPartialRequest: OmitTypeId<UpdateChannelPartialRequest>) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").UpdateChannelPartialResponse>;
    getOrCreate: (channelGetOrCreateRequest?: ChannelGetOrCreateRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").ChannelStateResponse>;
    markRead: (markReadRequest: MarkReadRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").MarkReadResponse>;
    markUnread: (markUnreadRequest: MarkUnreadRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").Response>;
    show: (showChannelRequest: ShowChannelRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").ShowChannelResponse>;
    hide: (hideChannelRequest: HideChannelRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").HideChannelResponse>;
    truncate: (truncateChannelRequest: TruncateChannelRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").TruncateChannelResponse>;
    queryMembers: (request: OmitTypeId<QueryMembersRequest>) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").MembersResponse>;
    mute: (muteChannelRequest: Omit<MuteChannelRequest, 'channel_cids'>) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").MuteChannelResponse>;
    unmute: (unmuteChannelRequest: Omit<UnmuteChannelRequest, 'channel_cids' | 'channel_cid'>) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").UnmuteResponse>;
    sendMessage: (sendMessageRequest: SendMessageRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").MessageWithPendingMetadataResponse>;
    deleteMessage: (request: DeleteMessageRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").MessageResponse>;
    updateMessage: (id: string, updateMessageRequest: UpdateMessageRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").MessageResponse>;
    updateMessagePartial: (id: string, updateMessagePartialRequest: UpdateMessagePartialRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").MessageResponse>;
    getMessage: (request: GetMessageRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").MessageWithPendingMetadataResponse>;
    getManyMessages: (request: OmitTypeId<GetManyMessagesRequest>) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").GetManyMessagesResponse>;
    translateMessage: (id: string, translateMessageRequest: TranslateMessageRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").MessageResponse>;
    getMessagesAround: (request: GetRepliesRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").GetRepliesResponse>;
    getOpenGraphData: (request: GetOGRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").GetOGResponse>;
    sendMessageReaction: (messageId: string, sendReactionRequest: SendReactionRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").ReactionResponse>;
    deleteMessageReaction: (messageId: string, request: Omit<DeleteReactionRequest, 'id'>) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").ReactionRemovalResponse>;
    getMessageReactions: (messageId: string, request?: Omit<GetReactionsRequest, 'id'>) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").GetReactionsResponse>;
    sendCustomEvent: (event: EventRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/chat").EventResponse>;
    private get baseRequest();
}
