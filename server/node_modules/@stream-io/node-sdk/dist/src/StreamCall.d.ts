import { StreamClient } from '@stream-io/node-sdk/dist/src/StreamClient';
import { DeleteRecordingRequest, DeleteTranscriptionRequest, GetCallRequest, GetCallStatsRequest, VideoBlockUserRequest, VideoDeleteCallRequest, VideoGetOrCreateCallRequest, VideoGoLiveRequest, VideoMuteUsersRequest, VideoPinRequest, VideoQueryCallMembersRequest, VideoSendCallEventRequest, VideoStartRecordingRequest, VideoStartTranscriptionRequest, VideoUnblockUserRequest, VideoUnpinRequest, VideoUpdateCallMembersRequest, VideoUpdateCallRequest, VideoUpdateUserPermissionsRequest } from '@stream-io/node-sdk/dist/src/gen/video';
import { OmitTypeId } from '@stream-io/node-sdk/dist/src/types';
export declare class StreamCall {
    private readonly streamClient;
    readonly type: string;
    readonly id: string;
    private readonly baseRequest;
    private readonly apiClient;
    constructor(streamClient: StreamClient, type: string, id: string);
    get cid(): string;
    blockUser: (videoBlockUserRequest: VideoBlockUserRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoBlockUserResponse>;
    delete: (videoDeleteCallRequest?: VideoDeleteCallRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoDeleteCallResponse>;
    endCall: () => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoEndCallResponse>;
    get: (request?: OmitTypeId<GetCallRequest>) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoGetCallResponse>;
    getOrCreate: (videoGetOrCreateCallRequest?: VideoGetOrCreateCallRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoGetOrCreateCallResponse>;
    getSessionStatistics: (request: OmitTypeId<GetCallStatsRequest>) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoGetCallStatsResponse>;
    create: (getOrCreateCallRequest?: VideoGetOrCreateCallRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoGetOrCreateCallResponse>;
    goLive: (videoGoLiveRequest?: VideoGoLiveRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoGoLiveResponse>;
    listRecordings: () => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoListRecordingsResponse>;
    deleteRecording: (request: OmitTypeId<DeleteRecordingRequest>) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoDeleteRecordingResponse>;
    listTranscriptions: () => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoListTranscriptionsResponse>;
    muteUsers: (videoMuteUsersRequest: VideoMuteUsersRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoMuteUsersResponse>;
    queryMembers: (request?: OmitTypeId<VideoQueryCallMembersRequest>) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoQueryCallMembersResponse>;
    sendCustomEvent: (videoSendCallEventRequest: VideoSendCallEventRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoSendCallEventResponse>;
    startHLSBroadcasting: () => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoStartHLSBroadcastingResponse>;
    startRecording: (request?: VideoStartRecordingRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoStartRecordingResponse>;
    startTranscription: (videoStartTranscriptionRequest?: VideoStartTranscriptionRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoStartTranscriptionResponse>;
    deleteTranscription: (request: OmitTypeId<DeleteTranscriptionRequest>) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoDeleteTranscriptionResponse>;
    stopHLSBroadcasting: () => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoStopHLSBroadcastingResponse>;
    stopLive: () => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoStopLiveResponse>;
    stopRecording: () => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoStopRecordingResponse>;
    stopTranscription: () => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoStopTranscriptionResponse>;
    unblockUser: (videoUnblockUserRequest: VideoUnblockUserRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoUnblockUserResponse>;
    update: (videoUpdateCallRequest: VideoUpdateCallRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoUpdateCallResponse>;
    updateCallMembers: (videoUpdateCallMembersRequest: VideoUpdateCallMembersRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoUpdateCallMembersResponse>;
    updateUserPermissions: (videoUpdateUserPermissionsRequest: VideoUpdateUserPermissionsRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoUpdateUserPermissionsResponse>;
    pinVideo: (videoPinRequest: VideoPinRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoPinResponse>;
    unpinVideo: (videoUnpinRequest: VideoUnpinRequest) => Promise<import("@stream-io/node-sdk/dist/src/gen/video").VideoUnpinResponse>;
}
